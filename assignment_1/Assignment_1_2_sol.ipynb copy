{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Francis Ndikum Nji\n",
        "\n",
        "#Campus ID: RN49536\n",
        "\n",
        "Solution to Question 2"
      ],
      "metadata": {
        "id": "pOnxfM-fOoS0"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hs9SNYYWV-Dt",
        "outputId": "6fca072e-73ea-4272-a611-1a326fb63b8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "!pip install graphviz\n",
        "!apt install libgraphviz-dev\n",
        "!pip install pygraphviz\n",
        "!pip install zepid\n",
        "from zepid.causal.causalgraph import DirectedAcyclicGraph\n",
        "\n",
        "import networkx as nx\n",
        "from networkx.drawing.nx_agraph import graphviz_layout, to_agraph\n",
        "import pygraphviz as pgv\n",
        "\n",
        "import seaborn as sns\n",
        "!pip install causalgraphicalmodels\n",
        "from causalgraphicalmodels import CausalGraphicalModel\n",
        "from causalgraphicalmodels.examples import fork, chain, collider"
      ],
      "metadata": {
        "id": "EPlSyAjAWxiy"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "#1. The causal graph with Zepid library\n",
        "---\n",
        "I used this library to have the same graph structure"
      ],
      "metadata": {
        "id": "7sw39QW9XH37"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from zepid.causal.causalgraph import DirectedAcyclicGraph\n",
        "dag = DirectedAcyclicGraph(exposure='X', outcome=\"Y\")\n",
        "dag.add_arrows((('X', 'W'), ('W', 'Y'),\n",
        "                ('B', 'A'), ('B', 'Z'),\n",
        "                ('C', 'D'), ('C', 'Z'),\n",
        "                ('Z', 'X'), ('Z', 'Y'),\n",
        "                ('A', 'X'), ('D', 'Y')\n",
        "                ))\n",
        "pos = {\"X\": [0, 0], \"W\": [1, 0], \"Y\": [2, 0],\"Z\": [1, 1],\n",
        "       \"A\": [0, 1], \"B\": [0, 2],\"D\": [2, 1], \"C\": [2, 2]}\n",
        "\n",
        "dag.draw_dag(positions=pos)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 369
        },
        "id": "ak2mR5pPXHO6",
        "outputId": "22241856-200c-41a0-a0dc-757555735f04"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Using the causalgraphicalmodels library"
      ],
      "metadata": {
        "id": "AurdrMsSaJ6C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from causalgraphicalmodels import CausalGraphicalModel\n",
        "\n",
        "sprinkler = CausalGraphicalModel(\n",
        "    nodes={\"X\": [0, 0], \"W\": [1, 0], \"Y\": [2, 0],\"Z\": [1, 1],\n",
        "       \"A\": [0, 1], \"B\": [0, 2],\"D\": [2, 1], \"C\": [2, 2]},\n",
        "    edges=[\n",
        "        ('X', 'W'), ('W', 'Y'),\n",
        "                ('B', 'A'), ('B', 'Z'),\n",
        "                ('C', 'D'), ('C', 'Z'),\n",
        "                ('Z', 'X'), ('Z', 'Y'),\n",
        "                ('A', 'X'), ('D', 'Y')\n",
        "\n",
        "    ]\n",
        ")\n",
        "\n",
        "# draw return a graphviz `dot` object, which jupyter can render\n",
        "sprinkler.draw()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "NkM1kjfkUUKU",
        "outputId": "83710f5c-34e4-4404-9e65-acdeb427b0ee"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<graphviz.dot.Digraph at 0x7f1df56fb690>"
            ],
            "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n -->\n<!-- Title: %3 Pages: 1 -->\n<svg width=\"189pt\" height=\"332pt\"\n viewBox=\"0.00 0.00 189.00 332.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 328)\">\n<title>%3</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-328 185,-328 185,4 -4,4\"/>\n<!-- X -->\n<g id=\"node1\" class=\"node\">\n<title>X</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"44\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"44\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">X</text>\n</g>\n<!-- W -->\n<g id=\"node5\" class=\"node\">\n<title>W</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"44\" cy=\"-90\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"44\" y=\"-86.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">W</text>\n</g>\n<!-- X&#45;&gt;W -->\n<g id=\"edge1\" class=\"edge\">\n<title>X&#45;&gt;W</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M44,-143.8314C44,-136.131 44,-126.9743 44,-118.4166\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"47.5001,-118.4132 44,-108.4133 40.5001,-118.4133 47.5001,-118.4132\"/>\n</g>\n<!-- A -->\n<g id=\"node2\" class=\"node\">\n<title>A</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"27\" cy=\"-234\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"27\" y=\"-230.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">A</text>\n</g>\n<!-- A&#45;&gt;X -->\n<g id=\"edge5\" class=\"edge\">\n<title>A&#45;&gt;X</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M31.2022,-216.2022C33.0821,-208.2406 35.3425,-198.6671 37.4371,-189.7957\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"40.8955,-190.3792 39.7872,-179.8425 34.0828,-188.7706 40.8955,-190.3792\"/>\n</g>\n<!-- Y -->\n<g id=\"node3\" class=\"node\">\n<title>Y</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"99\" cy=\"-18\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-14.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Y</text>\n</g>\n<!-- B -->\n<g id=\"node4\" class=\"node\">\n<title>B</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"54\" cy=\"-306\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"54\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">B</text>\n</g>\n<!-- B&#45;&gt;A -->\n<g id=\"edge6\" class=\"edge\">\n<title>B&#45;&gt;A</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M47.3258,-288.2022C44.2524,-280.0064 40.5384,-270.1024 37.1305,-261.0145\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"40.3858,-259.7274 33.5974,-251.593 33.8315,-262.1853 40.3858,-259.7274\"/>\n</g>\n<!-- Z -->\n<g id=\"node6\" class=\"node\">\n<title>Z</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"99\" cy=\"-234\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-230.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Z</text>\n</g>\n<!-- B&#45;&gt;Z -->\n<g id=\"edge7\" class=\"edge\">\n<title>B&#45;&gt;Z</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M64.437,-289.3008C69.9235,-280.5224 76.7686,-269.5703 82.9163,-259.7339\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"85.9751,-261.4436 88.3071,-251.1086 80.0391,-257.7336 85.9751,-261.4436\"/>\n</g>\n<!-- W&#45;&gt;Y -->\n<g id=\"edge2\" class=\"edge\">\n<title>W&#45;&gt;Y</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M56.4804,-73.6621C63.5124,-64.4564 72.4347,-52.7764 80.2883,-42.4953\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"83.28,-44.3446 86.569,-34.2733 77.7172,-40.0953 83.28,-44.3446\"/>\n</g>\n<!-- Z&#45;&gt;X -->\n<g id=\"edge3\" class=\"edge\">\n<title>Z&#45;&gt;X</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M86.5196,-217.6621C79.4876,-208.4564 70.5653,-196.7764 62.7117,-186.4953\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"65.2828,-184.0953 56.431,-178.2733 59.72,-188.3446 65.2828,-184.0953\"/>\n</g>\n<!-- Z&#45;&gt;Y -->\n<g id=\"edge4\" class=\"edge\">\n<title>Z&#45;&gt;Y</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M99,-215.9555C99,-178.3938 99,-91.5541 99,-46.4103\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"102.5001,-46.145 99,-36.1451 95.5001,-46.1451 102.5001,-46.145\"/>\n</g>\n<!-- D -->\n<g id=\"node7\" class=\"node\">\n<title>D</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"154\" cy=\"-162\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"154\" y=\"-158.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">D</text>\n</g>\n<!-- D&#45;&gt;Y -->\n<g id=\"edge8\" class=\"edge\">\n<title>D&#45;&gt;Y</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M147.2559,-144.3428C137.8133,-119.6202 120.5649,-74.4608 109.4515,-45.3639\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"112.637,-43.8946 105.7992,-35.8017 106.0977,-46.3923 112.637,-43.8946\"/>\n</g>\n<!-- C -->\n<g id=\"node8\" class=\"node\">\n<title>C</title>\n<ellipse fill=\"none\" stroke=\"#000000\" cx=\"140\" cy=\"-306\" rx=\"27\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"140\" y=\"-302.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">C</text>\n</g>\n<!-- C&#45;&gt;Z -->\n<g id=\"edge10\" class=\"edge\">\n<title>C&#45;&gt;Z</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M130.2836,-288.937C125.3307,-280.2393 119.2039,-269.4799 113.6887,-259.7948\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"116.6366,-257.8984 108.6467,-250.9405 110.5537,-261.3623 116.6366,-257.8984\"/>\n</g>\n<!-- C&#45;&gt;D -->\n<g id=\"edge9\" class=\"edge\">\n<title>C&#45;&gt;D</title>\n<path fill=\"none\" stroke=\"#000000\" d=\"M141.7731,-287.7623C144.161,-263.201 148.4343,-219.2474 151.2434,-190.3541\"/>\n<polygon fill=\"#000000\" stroke=\"#000000\" points=\"154.7571,-190.3814 152.2413,-180.0896 147.79,-189.704 154.7571,-190.3814\"/>\n</g>\n</g>\n</svg>\n"
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "#2.   Write code to find all backdoor paths from X to Y.\n",
        "---"
      ],
      "metadata": {
        "id": "7KBI9_ILP2a6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#To get all backdoor paths from X to Y.\n",
        "sprinkler.get_all_backdoor_paths(\"X\", \"Y\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gwg8fFHsVGVk",
        "outputId": "634a0f7c-834e-4638-aea7-ae0a0a5b88a8"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['X', 'Z', 'Y'],\n",
              " ['X', 'Z', 'C', 'D', 'Y'],\n",
              " ['X', 'A', 'B', 'Z', 'Y'],\n",
              " ['X', 'A', 'B', 'Z', 'C', 'D', 'Y']]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "But because Z acts as a collider in the path  {X, A, B, Z, C, D, Y}, it is blocked unless conditioned on. To find a valid adjustment set, we need a set which blocks this path. The function \"is_valid_backdoor_adjustment_set\" tests the validity of the adjustment set and outputs \"True\" for a valid set or \"False\" for an invalid set."
      ],
      "metadata": {
        "id": "ebyIUaCF2L6z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sprinkler.is_valid_backdoor_adjustment_set(\"X\", \"Y\", {'Z'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8AqkI5SBd1wF",
        "outputId": "adb8207d-3244-420b-8a2c-7e037608bc4e"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sprinkler.is_valid_backdoor_adjustment_set(\"X\", \"Y\", {'Z', 'C', 'D'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lBdYWH0Fch_O",
        "outputId": "56272586-81dd-420b-eefb-2d73e1056eac"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sprinkler.is_valid_backdoor_adjustment_set(\"X\", \"Y\", {'A', 'B', 'Z'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4VC1g0cdoje",
        "outputId": "5f3e2056-3be7-4703-bcb3-cf45d770b371"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sprinkler.is_valid_backdoor_adjustment_set(\"X\", \"Y\", {'A', 'B', 'Z', 'C', 'D'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUA7JRJidtPm",
        "outputId": "26bb1bba-58d0-4052-e394-4a39dea5e732"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sprinkler.is_valid_backdoor_adjustment_set(\"X\", \"Y\", {'B', 'Z', 'C'})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vVYhgpqZN9LS",
        "outputId": "b81245bf-f855-455b-bbdc-91c37fdb7ca4"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2pzr3kOnOhJK"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "---\n",
        "#3.   List all of the sets of variables that satisfy the backdoor criterion.\n",
        "---"
      ],
      "metadata": {
        "id": "3fZsEgcNekXV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Possible adjustment set\n",
        "\n",
        "dag.calculate_adjustment_sets()\n",
        "print(dag.adjustment_sets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a9UBPk_Cev1k",
        "outputId": "5b56980d-91c4-4c2f-aa53-15ac954947b5"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[('A', 'Z'), ('B', 'A', 'Z'), ('A', 'Z', 'C'), ('A', 'Z', 'D'), ('B', 'A', 'Z', 'C'), ('B', 'A', 'Z', 'D'), ('A', 'Z', 'C', 'D'), ('B', 'A', 'Z', 'C', 'D')]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To compute all valid adjustment sets \n",
        "sprinkler.get_all_backdoor_adjustment_sets(\"X\", \"Y\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gRO7cyEGevym",
        "outputId": "00a77037-453f-490d-8e8d-419bfbc0cb8a"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "frozenset({frozenset({'B', 'C', 'Z'}),\n",
              "           frozenset({'C', 'D', 'Z'}),\n",
              "           frozenset({'A', 'B', 'Z'}),\n",
              "           frozenset({'D', 'Z'}),\n",
              "           frozenset({'B', 'Z'}),\n",
              "           frozenset({'A', 'D', 'Z'}),\n",
              "           frozenset({'A', 'C', 'D', 'Z'}),\n",
              "           frozenset({'A', 'B', 'D', 'Z'}),\n",
              "           frozenset({'C', 'Z'}),\n",
              "           frozenset({'A', 'Z'}),\n",
              "           frozenset({'A', 'C', 'Z'}),\n",
              "           frozenset({'B', 'D', 'Z'}),\n",
              "           frozenset({'B', 'C', 'D', 'Z'}),\n",
              "           frozenset({'A', 'B', 'C', 'Z'}),\n",
              "           frozenset({'A', 'B', 'C', 'D', 'Z'})})"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vRd5OyL4evwO"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#4. Minimal sets of variables that satisfy the backdoor criterion to determine the causal effect of X on Y."
      ],
      "metadata": {
        "id": "freEV2Gaqqe_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the causal graph above, we see that the node Z is present in all four backdoor paths from X to Y, and Z is a collider on the path [X, A, B, Z, C, D, Y]. Conditioning on Z will unblock this path and will violate the\n",
        "backdoor criterion. To block all backdoor paths, we must also condition on one of its parents (or their descendants), giving us a choice of one of (A, B, C, or D). Z in addition to any combinations of these 4 nodes will fulfill the back-door criteria. So we could adjust on (Z, A), (Z, B), (Z, C), (Z, D). We see, therefore, that Z, a collider, must be adjusted for in any set that yields an unbiased estimate of the effect of X on Y."
      ],
      "metadata": {
        "id": "-MKtexEnqwxQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#5. Write code to load and take a look at the data."
      ],
      "metadata": {
        "id": "2BQrqXgtrI44"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#path = /content/drive/MyDrive/Fall_2022/IS_800_Causality_New/Assignment_1/DatasetProblem2.csv\n",
        "data = pd.read_csv('/content/drive/MyDrive/Fall_2022/IS_800_Causality_New/Assignment_1/DatasetProblem2.csv')\n",
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Bd8wCg6irakF",
        "outputId": "4ac25b2f-a018-4177-e791-40a973578dcb"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          A         B         C         D         W         X         Y  \\\n",
              "0  2.602301  2.164052  0.497883  0.520597  0.455927  1.703984 -1.482663   \n",
              "1  0.839685  0.800157 -0.133231  0.264815  1.588338  2.700699  3.653630   \n",
              "2  2.265791  1.378738  2.433600  1.234205  1.163482  1.579211  3.269566   \n",
              "3  3.201152  2.640893  0.890649  0.402494  2.631039  2.132182  3.104638   \n",
              "4 -0.123011  2.267558  0.522190  0.810416 -1.173674 -1.910518 -0.222856   \n",
              "\n",
              "          Z  \n",
              "0 -0.459168  \n",
              "1  1.032344  \n",
              "2  4.030934  \n",
              "3  1.219381  \n",
              "4  0.732709  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5a2c2696-0cc5-4034-98ab-6906ead14f99\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>W</th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>Z</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.602301</td>\n",
              "      <td>2.164052</td>\n",
              "      <td>0.497883</td>\n",
              "      <td>0.520597</td>\n",
              "      <td>0.455927</td>\n",
              "      <td>1.703984</td>\n",
              "      <td>-1.482663</td>\n",
              "      <td>-0.459168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.839685</td>\n",
              "      <td>0.800157</td>\n",
              "      <td>-0.133231</td>\n",
              "      <td>0.264815</td>\n",
              "      <td>1.588338</td>\n",
              "      <td>2.700699</td>\n",
              "      <td>3.653630</td>\n",
              "      <td>1.032344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.265791</td>\n",
              "      <td>1.378738</td>\n",
              "      <td>2.433600</td>\n",
              "      <td>1.234205</td>\n",
              "      <td>1.163482</td>\n",
              "      <td>1.579211</td>\n",
              "      <td>3.269566</td>\n",
              "      <td>4.030934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.201152</td>\n",
              "      <td>2.640893</td>\n",
              "      <td>0.890649</td>\n",
              "      <td>0.402494</td>\n",
              "      <td>2.631039</td>\n",
              "      <td>2.132182</td>\n",
              "      <td>3.104638</td>\n",
              "      <td>1.219381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.123011</td>\n",
              "      <td>2.267558</td>\n",
              "      <td>0.522190</td>\n",
              "      <td>0.810416</td>\n",
              "      <td>-1.173674</td>\n",
              "      <td>-1.910518</td>\n",
              "      <td>-0.222856</td>\n",
              "      <td>0.732709</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5a2c2696-0cc5-4034-98ab-6906ead14f99')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5a2c2696-0cc5-4034-98ab-6906ead14f99 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5a2c2696-0cc5-4034-98ab-6906ead14f99');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "HiSUExKvtvhy",
        "outputId": "c53aad03-9a03-4ef9-9741-a7cd025d2667"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  A             B             C             D             W  \\\n",
              "count  10000.000000  10000.000000  10000.000000  10000.000000  10000.000000   \n",
              "mean       0.394982      0.381566      0.710988      0.211290      0.512583   \n",
              "std        1.440280      0.987606      0.993104      1.056776      1.739730   \n",
              "min       -5.215048     -3.340101     -3.746632     -3.940893     -6.457293   \n",
              "25%       -0.570654     -0.289707      0.054712     -0.485442     -0.668365   \n",
              "50%        0.389879      0.372927      0.704078      0.228657      0.522088   \n",
              "75%        1.359496      1.046089      1.376403      0.918636      1.716961   \n",
              "max        5.579001      4.201660      4.298310      4.340303      7.121039   \n",
              "\n",
              "                  X             Y             Z  \n",
              "count  10000.000000  10000.000000  10000.000000  \n",
              "mean       0.584010      0.973753      0.755718  \n",
              "std        1.608777      2.216820      1.364684  \n",
              "min       -5.260569     -7.214188     -4.142516  \n",
              "25%       -0.503971     -0.470169     -0.159272  \n",
              "50%        0.561199      0.955625      0.762106  \n",
              "75%        1.685734      2.479327      1.680683  \n",
              "max        6.725668     10.420179      6.598771  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0fdb3958-1fc0-4add-89e4-26b44eaaf353\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>A</th>\n",
              "      <th>B</th>\n",
              "      <th>C</th>\n",
              "      <th>D</th>\n",
              "      <th>W</th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>Z</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "      <td>10000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.394982</td>\n",
              "      <td>0.381566</td>\n",
              "      <td>0.710988</td>\n",
              "      <td>0.211290</td>\n",
              "      <td>0.512583</td>\n",
              "      <td>0.584010</td>\n",
              "      <td>0.973753</td>\n",
              "      <td>0.755718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.440280</td>\n",
              "      <td>0.987606</td>\n",
              "      <td>0.993104</td>\n",
              "      <td>1.056776</td>\n",
              "      <td>1.739730</td>\n",
              "      <td>1.608777</td>\n",
              "      <td>2.216820</td>\n",
              "      <td>1.364684</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-5.215048</td>\n",
              "      <td>-3.340101</td>\n",
              "      <td>-3.746632</td>\n",
              "      <td>-3.940893</td>\n",
              "      <td>-6.457293</td>\n",
              "      <td>-5.260569</td>\n",
              "      <td>-7.214188</td>\n",
              "      <td>-4.142516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-0.570654</td>\n",
              "      <td>-0.289707</td>\n",
              "      <td>0.054712</td>\n",
              "      <td>-0.485442</td>\n",
              "      <td>-0.668365</td>\n",
              "      <td>-0.503971</td>\n",
              "      <td>-0.470169</td>\n",
              "      <td>-0.159272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.389879</td>\n",
              "      <td>0.372927</td>\n",
              "      <td>0.704078</td>\n",
              "      <td>0.228657</td>\n",
              "      <td>0.522088</td>\n",
              "      <td>0.561199</td>\n",
              "      <td>0.955625</td>\n",
              "      <td>0.762106</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.359496</td>\n",
              "      <td>1.046089</td>\n",
              "      <td>1.376403</td>\n",
              "      <td>0.918636</td>\n",
              "      <td>1.716961</td>\n",
              "      <td>1.685734</td>\n",
              "      <td>2.479327</td>\n",
              "      <td>1.680683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.579001</td>\n",
              "      <td>4.201660</td>\n",
              "      <td>4.298310</td>\n",
              "      <td>4.340303</td>\n",
              "      <td>7.121039</td>\n",
              "      <td>6.725668</td>\n",
              "      <td>10.420179</td>\n",
              "      <td>6.598771</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0fdb3958-1fc0-4add-89e4-26b44eaaf353')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0fdb3958-1fc0-4add-89e4-26b44eaaf353 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0fdb3958-1fc0-4add-89e4-26b44eaaf353');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nZkppH4Z4pGg",
        "outputId": "9e4d525a-7153-4faf-c88d-0ab3946a31f5"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 8 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   A       10000 non-null  float64\n",
            " 1   B       10000 non-null  float64\n",
            " 2   C       10000 non-null  float64\n",
            " 3   D       10000 non-null  float64\n",
            " 4   W       10000 non-null  float64\n",
            " 5   X       10000 non-null  float64\n",
            " 6   Y       10000 non-null  float64\n",
            " 7   Z       10000 non-null  float64\n",
            "dtypes: float64(8)\n",
            "memory usage: 625.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-mH2gaAV5JQR",
        "outputId": "aa617543-ffd4-4163-96a7-f5e7ab631f06"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "A    0\n",
              "B    0\n",
              "C    0\n",
              "D    0\n",
              "W    0\n",
              "X    0\n",
              "Y    0\n",
              "Z    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#6. write code to find the causal effect of X on Y for the following adjustment sets:\n",
        "a. Empty adjustment set, {}\n",
        "b. {Z}\n",
        "c. {Z, A}\n",
        "d. {Z, B}\n",
        "e. {Z, C}\n",
        "f. {Z, D}\n",
        "g. {A, B, C, D}\n",
        "h. {Z, A, B, C, D}"
      ],
      "metadata": {
        "id": "zN3_8xGXtv6D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# An approach to causal effect estimation - no bootstrapping\n",
        "def causalEffectEstimation(data, xColumns, xColumnsLabel, zColumns, yColumns, model = RandomForestClassifier(n_estimators=10)):\n",
        "    # separate data into treatment, adjustment set, outcome\n",
        "    # treatment, X\n",
        "    trainX = data[xColumns]\n",
        "    # adjustment set, Z\n",
        "    trainZ = data[zColumns]\n",
        "    # outcome, Y\n",
        "    trainY = data[yColumns]\n",
        "    \n",
        "    # merge treatment, X and adjustment, Z\n",
        "    trainXZ = pd.concat([trainX, trainZ], axis = 1)\n",
        "\n",
        "    # we fit a ML model \n",
        "    model.fit(trainXZ, trainY)\n",
        "\n",
        "    ## Causal effect estimation \n",
        "\n",
        "    # No treatment: Set X = 0.\n",
        "    testXZPlacebo = trainXZ.copy()\n",
        "    testXZPlacebo[xColumns] = 0\n",
        "    # With treatment: Set X = 1.\n",
        "    testXZTreatment = trainXZ.copy()\n",
        "    testXZTreatment[xColumns] = 1\n",
        "\n",
        "    # Estimate outcome without treatment    \n",
        "    placeboEstimate = np.mean(model.predict(testXZPlacebo))\n",
        "    # Estimate outcome without treatment   \n",
        "    treatmentEstimate = np.mean(model.predict(testXZTreatment))\n",
        "    \n",
        "    # Estimate average treatment effect\n",
        "    causalEffect = treatmentEstimate - placeboEstimate\n",
        "\n",
        "    # Print results:    \n",
        "    # print('Placebo estimate:' + str(placeboEstimate))\n",
        "    # print('Treatment estimate:' + str(treatmentEstimate))\n",
        "    print('Causal effect:' + str(causalEffect))"
      ],
      "metadata": {
        "id": "vlFcu3sTevte"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Nothing\n",
        "xColumns = ['X']\n",
        "zColumns = []\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rkZf091zK04g",
        "outputId": "f8b01638-3d84-437c-d3e3-c7526216c8ef"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.9422406531651981\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Z\n",
        "xColumns = ['X']\n",
        "zColumns = ['Z']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XRP20ApdMt9H",
        "outputId": "0c006a51-f4ca-4a95-f370-a3ee3073f924"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.6417030597916631\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Z and A\n",
        "xColumns = ['X']\n",
        "zColumns = ['A', 'Z']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7EArGYjUMt4e",
        "outputId": "bda33297-f47c-458d-a319-98f392c6d9e6"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.6470450790821398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Z and B\n",
        "xColumns = ['X']\n",
        "zColumns = ['B','Z']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKjch7vJMtzw",
        "outputId": "2ab7418f-12f7-4895-e524-7f250151c743"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.6578986305249909\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Z and C\n",
        "xColumns = ['X']\n",
        "zColumns = ['C', 'Z']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WpQuk14OMtsf",
        "outputId": "fe27077d-e974-4508-a21d-decfb1ae4d5a"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.65823578254577\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust Z and D\n",
        "xColumns = ['X']\n",
        "zColumns = ['D', 'Z']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VBpcWC20MtpK",
        "outputId": "91b573b8-8b9f-4248-d95b-758172e41d2a"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.656852257395233\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust A, B, C, D\n",
        "xColumns = ['X']\n",
        "zColumns = ['A', 'B', 'C', 'D']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrs1hbGXMtl2",
        "outputId": "1bf17007-7f4e-4da2-d5c5-4e387dca29ba"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.859825977810807\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adjust A, B, C, D\n",
        "xColumns = ['X']\n",
        "zColumns = ['Z', 'A', 'B', 'C', 'D']\n",
        "yColumns = ['Y']\n",
        "causalEffectEstimation(data, xColumns, 'X', zColumns, yColumns, LinearRegression())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tkucERlBMtiO",
        "outputId": "8aca18fd-70af-453e-c3dc-c8fc835e15ec"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Causal effect:0.6516705994364808\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#7. Explain the similarities and differences in results that found in question 6(a)-(h) based on different adjustment sets. Hint: you can use your answer to question 2, 3 and 4 to explain it.\n",
        "\n",
        "Adjustment Formula in Potential Outcomes Framework is based on the untestable conditional exchangeability or unconfoundness assumption. Our goal is to look for that variable that when conditioned on meets the conditional exchangeability assumption.\n",
        "\n",
        "*  First we need to identify all confounding variables which are Z, B and C so conditioning on these confounding variables meets the conditional exchangeability assumption more than on other variables\n",
        "*   Z is a collider in the path [X, Z, Y] and a confounder in the path [X, A, B, Z, C, D, Y]\n",
        "\n",
        "*   From our causal effect estimation, we see that adjustments on [B, Z] and [C, Z] yield very similar results or causal estimates.\n",
        "*   In (a) we have the highest efect which implies that no adjustment is necessary to estimate the causal effect of X on Y. This could also be observed that adjusting on [A, B, C, D] without Z yields a higher estimate than an adjustment set with Z.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "yUIiJtrRuZIb"
      }
    }
  ]
}